#!/usr/bin/env ruby

require 'dotenv'
require 'octokit'
require 'yaml'
require 'logger'

Dotenv.load

def relative_to_root(path)
  File.expand_path("../#{path}", File.dirname(__FILE__))
end

# Load YAML file at given path relative to repo root
def load_yaml(path)
  YAML.load_file File.expand_path("../#{path}", File.dirname(__FILE__))
end

logger = Logger.new(STDOUT)
client = Octokit::Client.new access_token: ENV['OCTOKIT_ACCESS_TOKEN']
deploy = load_yaml('deploy.yml')
settings = load_yaml('.github/settings.yml')

# rubocop:disable Metrics/BlockLength
deploy['repositories'].each do |repository|
  logger.info "Begining deployment for #{repository}"
  repo_info = client.repository repository
  repo_id   = repo_info.id

  logger.info '=> Configuration Apps'
  deploy['installations'].each do |label, installation|
    logger.info "==> Installing #{label}"
    options = { accept: 'application/vnd.github.machine-man-preview+json' }
    client.add_repository_to_app_installation installation, repo_id, options
  end

  logger.info '=> Setting .github/ contents'
  remote_dotgithub_files = begin
    client.contents repository, path: '.github'
  rescue Octokit::NotFound
    {}
  end
  local_dotgithub_files = Dir[relative_to_root('.github/*')]

  local_dotgithub_files.each do |file|
    path = File.join '.github/', File.basename(file)
    content = File.read(file).gsub('<REPO>', repository)

    if remote_dotgithub_files.any? { |f| f.path == path }
      logger.warn "==> #{path} already exists. Ovewriting"
      blob = client.contents repository, path: path
      msg  = "Update #{path}"
      client.update_contents repository, path, msg, blob.sha, content
    else
      logger.info "==> Creating #{path}"
      client.create_contents repository, path, "Create #{path}", content
    end
  end

  logger.info '=> Setting branch protection'
  options = { accept: 'application/vnd.github.loki-preview+json' }
  options = options.merge settings['branch_protection']

  # Not 100% sure why, but unless you symbolize the `required_status_checks` key
  # Octokit fails to set required status contexts for some reason
  options = options.each_with_object({}) { |(k, v), memo| memo[k.to_sym] = v; }

  client.protect_branch repository, 'master', options
end
